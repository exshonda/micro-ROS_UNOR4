--- include/uxr/agent/datareader/DataReader.hpp	Wed Nov 22 15:44:50 2023
+++ include/uxr/agent/datareader/DataReader.hpp	Mon Mar 25 22:17:17 2024
@@ -17,6 +17,9 @@
 
 #include <uxr/agent/object/XRCEObject.hpp>
 #include <uxr/agent/reader/Reader.hpp>
+#if defined(UXR_AGENT_RESTRICT) || defined(UXR_AGENT_PROTECT)
+#include <map>
+#endif
 
 namespace eprosima {
 namespace uxr {
@@ -62,9 +65,28 @@
         std::vector<uint8_t>& data,
         std::chrono::milliseconds timeout);
 
+#if defined(UXR_AGENT_RESTRICT) || defined(UXR_AGENT_PROTECT)
+    std::chrono::system_clock::time_point get_read_time() const;
+#endif
+
 private:
     std::shared_ptr<ProxyClient> proxy_client_;
     Reader<bool> reader_;
+#if defined(UXR_AGENT_RESTRICT) || defined(UXR_AGENT_PROTECT)
+	struct TopicInfo
+	{
+		uint16_t objectID;
+		std::string TopicName;
+		float frequency;
+		int count;
+	};
+
+	std::map<uint16_t, std::chrono::system_clock::time_point> read_times_;
+	static std::vector<std::string> topic_frequency_array;
+	static std::vector<eprosima::uxr::TopicInfo> topic_info_;
+	static int topic_count = 0;
+	static std::vector<float> frequency;
+#endif
 };
 
 } // namespace uxr
--- include/uxr/agent/utils/ArgumentParser.hpp	Wed Nov 22 15:44:50 2023
+++ include/uxr/agent/utils/ArgumentParser.hpp	Mon Mar 25 22:06:06 2024
@@ -469,6 +469,9 @@
         , refs_("-r", "--refs")
         , verbose_("-v", "--verbose", static_cast<uint16_t>(DEFAULT_VERBOSE_LEVEL),
             {0, 1, 2, 3, 4, 5, 6})
+#if defined(UXR_AGENT_RESTRICT) || defined(UXR_AGENT_PROTECT)
+        , topic_("-t", "--topic")
+#endif
 #ifdef UAGENT_DISCOVERY_PROFILE
         , discovery_("-d", "--discovery", static_cast<uint16_t>(DEFAULT_DISCOVERY_PORT), {}, false)
 #endif
@@ -528,6 +531,40 @@
             result.first = false;
             return result;
         }
+#if defined(UXR_AGENT_RESTRICT) || defined(UXR_AGENT_PROTECT)
+        ParseResult topic = topic_.parse_argument(argc, argv);
+        if (ParseResult::VALID == topic)
+        {
+            struct stat tp;
+            if (stat(topic_.value().c_str(), &tp) < 0){
+                std::cerr << "Error: reference file '" << refs_.value() << "' does not exist!" << std::endl;
+                result.first = false;
+                return result;
+            }
+            else{
+                std::ifstream file(topic_.value());
+                std::string line;
+                while (std::getline(file, line))
+                {
+                    std::string token;
+                    std::istringstream tokenStream(line);
+                    while (std::getline(tokenStream, token, ','))
+                    {
+                        DataReader::topic_frequency_array.push_back(token);
+                    }
+                }
+                for (size_t i = 0; i < DataReader::topic_frequency_array.size(); i++)
+                {
+                    std::cout << DataReader::topic_frequency_array[i] << std::endl;
+                }
+            }
+        }
+        else if (ParseResult::INVALID == topic)
+        {
+            result.first = false;
+            return result;
+        }
+#endif
 #ifdef UAGENT_DISCOVERY_PROFILE
         if (ParseResult::INVALID == discovery_.parse_argument(argc, argv))
         {
@@ -611,6 +648,9 @@
     Argument<std::string> middleware_;
     Argument<std::string> refs_;
     Argument<uint8_t> verbose_;
+#if defined(UXR_AGENT_RESTRICT) || defined(UXR_AGENT_PROTECT)
+    Argument<std::string> topic_;
+#endif
 #ifdef UAGENT_DISCOVERY_PROFILE
     Argument<uint16_t> discovery_;
 #endif
--- src/cpp/datareader/DataReader.cpp	Wed Nov 22 15:44:50 2023
+++ src/cpp/datareader/DataReader.cpp	Mon Mar 25 22:16:24 2024
@@ -30,7 +30,34 @@
 {
     bool created_entity = false;
     uint16_t raw_object_id = conversion::objectid_to_raw(object_id);
+#if defined(UXR_AGENT_RESTRICT) || defined(UXR_AGENT_PROTECT)
+    std::string topic_name = "";
 
+    for (const auto &topic : topic_info_)
+    {
+        if (topic.objectID == raw_object_id)
+        {
+            topic_name = topic.TopicName;
+        }
+    }
+
+    std::vector<float> matched_next_values;
+
+    for (size_t i = 0; i < topic_frequency_array.size(); ++i)
+    {
+        if (topic_frequency_array[i].compare(topic_name) == 0 && i + 1 < topic_frequency_array.size())
+        {
+            for (auto &topic : topic_info_)
+            {
+                if (topic.objectID == raw_object_id)
+                {
+                    topic.frequency = std::stof(topic_frequency_array[i + 1]);
+                    break;
+                }
+            }
+        }
+    }
+#endif
     Middleware& middleware = proxy_client->get_middleware();
     switch (representation.representation()._d())
     {
@@ -175,15 +202,87 @@
     bool rv = false;
     if (proxy_client_->get_middleware().read_data(get_raw_id(), data, timeout))
     {
+#if defined(UXR_AGENT_RESTRICT)
+        for (auto &topic : topic_info_)
+        {
+            if (topic.objectID == get_raw_id())
+            {
+                if (topic.frequency == 1000){
+                    UXR_AGENT_LOG_MESSAGE(
+                        UXR_DECORATE_YELLOW("[==>> DDS <<==]"),
+                        get_raw_id(),
+                        data.data(),
+                        data.size());
+                    rv = true;
+                }
+            }
+            else
+            {
+                if (topic.count < topic.frequency)
+                {
+                    UXR_AGENT_LOG_MESSAGE(
+                        UXR_DECORATE_YELLOW("[==>> DDS <<==]"),
+                        get_raw_id(),
+                        data.data(),
+                        data.size());
+                    rv = true;
+                }
+                else
+                {
+                    topic.count = 0;
+                    break;
+                }
+            }
+        }
+#elif defined(UXR_AGENT_PROTECT)
+        std::chrono::duration<double> diff = std::chrono::system_clock::now() - read_times_[get_raw_id()];
+        float frequency_ = 0.001;
+        for (const auto &topic : topic_info_)
+        {
+            if (topic.objectID == get_raw_id())
+            {
+                frequency_ = topic.frequency;
+                break;
+            }
+        }
+
+        if (diff.count() > frequency_)
+        {
+            read_times_[get_raw_id()] = std::chrono::system_clock::now();
+
+            UXR_AGENT_LOG_MESSAGE(
+                UXR_DECORATE_YELLOW("[==>> DDS <<==]"),
+                get_raw_id(),
+                data.data(),
+                data.size());
+            rv = true;
+        }
+#else
         UXR_AGENT_LOG_MESSAGE(
             UXR_DECORATE_YELLOW("[==>> DDS <<==]"),
             get_raw_id(),
             data.data(),
             data.size());
         rv = true;
+#endif
     }
     return rv;
 }
+
+#if defined(UXR_AGENT_PROTECT)
+std::chrono::system_clock::time_point DataReader::get_read_time() const
+{
+    auto it = read_times_.find(get_raw_id());
+    if (it != read_times_.end())
+    {
+        return it->second;
+    }
+    else
+    {
+        return std::chrono::system_clock::time_point();
+    }
+}
+#endif
 
 } // namespace uxr
 } // namespace eprosima
--- src/cpp/middleware/fastdds/FastDDSMiddleware.cpp	Wed Nov 22 15:44:50 2023
+++ src/cpp/middleware/fastdds/FastDDSMiddleware.cpp	Mon Mar 25 22:11:51 2024
@@ -209,6 +209,13 @@
     fastrtps::TopicAttributes attrs;
     if (XMLP_ret::XML_OK == XMLProfileManager::fillTopicAttributes(ref, attrs))
     {
+#if defined(UXR_AGENT_RESTRICT)
+        std::string topic_name = attrs.getTopicName().c_str();
+        topic_info_.push_back({topic_id, topic_name, 1000});
+#elif defined(UXR_AGENT_PROTECT)
+        std::string topic_name = attrs.getTopicName().c_str();
+        topic_info_.push_back({topic_id, topic_name, 0.0001});
+#endif
         auto it_participant = participants_.find(participant_id);
         if (participants_.end() != it_participant)
         {
@@ -226,6 +233,13 @@
 {
     bool rv = false;
     fastrtps::TopicAttributes attrs;
+#if defined(UXR_AGENT_RESTRICT)
+    std::string topic_name = attrs.getTopicName().c_str();
+    topic_info_.push_back({topic_id, topic_name, 1000});
+#elif defined(UXR_AGENT_PROTECT)
+    std::string topic_name = attrs.getTopicName().c_str();
+    topic_info_.push_back({topic_id, topic_name, 0.001});
+#endif
     if (xmlobjects::parse_topic(xml.data(), xml.size(), attrs))
     {
         auto it_participant = participants_.find(participant_id);
@@ -243,6 +257,13 @@
         uint16_t participant_id,
         const dds::xrce::OBJK_Topic_Binary& topic_xrce)
 {
+#if defined(UXR_AGENT_RESTRICT)
+    std::string topic_name = topic_xrce.topic_name().c_str();
+    topic_info_.push_back({topic_id, topic_name, 1000});
+#elif defined(UXR_AGENT_PROTECT)
+    std::string topic_name = topic_xrce.topic_name().c_str();
+    topic_info_.push_back({topic_id, topic_name, 0.001});
+#endif
     bool rv = false;
     auto it_participant = participants_.find(participant_id);
     if (participants_.end() != it_participant)
